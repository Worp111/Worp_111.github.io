<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/Worp_111.github.io/2022/04/05/BUU%E5%88%B7%E9%A2%98/"/>
      <url>/Worp_111.github.io/2022/04/05/BUU%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Alice与Bob"><a href="#1-Alice与Bob" class="headerlink" title="1.Alice与Bob"></a>1.Alice与Bob</h1><p>查看题目<br><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190507182.png" alt="image-20220401190507182"><br>题目都说了分解素数，小前大后<br><a href="http://www.jsons.cn/quality/">素数分解</a><br><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190524440.png" alt="image-20220401190524440"><br>直接可以看出flag{101999966233}</p><h1 id="2-rsarsa"><a href="#2-rsarsa" class="headerlink" title="2.rsarsa"></a>2.rsarsa</h1><p>类型：n+e+c+p+q= m<br><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190603293.png" alt="image-20220401190603293"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">e p <span class="token operator">=</span> <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span> <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>n <span class="token operator">=</span> p<span class="token operator">*</span>q<span class="token comment">#密文</span>C <span class="token operator">=</span> <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>d <span class="token operator">=</span> <span class="token number">56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span>M <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>解出flag<span class="token punctuation">&#123;</span><span class="token number">5577446633554466577768879988</span><span class="token punctuation">&#125;</span>p <span class="token operator">=</span> <span class="token number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>q <span class="token operator">=</span> <span class="token number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qC <span class="token operator">=</span> <span class="token number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>d <span class="token operator">=</span> <span class="token number">56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span>M <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>解出flag<span class="token punctuation">&#123;</span><span class="token number">5577446633554466577768879988</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-RSA1"><a href="#3-RSA1" class="headerlink" title="3.RSA1"></a>3.RSA1</h2><p>题目</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220404202724625.png" alt="image-20220404202724625"></p><p>没什么好讲的，简单算法，直接上脚本吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes  p <span class="token operator">=</span> <span class="token number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> q <span class="token operator">=</span> <span class="token number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> dp <span class="token operator">=</span> <span class="token number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> dq <span class="token operator">=</span> <span class="token number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> c <span class="token operator">=</span> <span class="token number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>InvQ<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span>  mp<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>p<span class="token punctuation">)</span>  mq<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>q<span class="token punctuation">)</span>  m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token operator">-</span>mq<span class="token punctuation">)</span><span class="token operator">*</span>InvQ<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span>mq  <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-RSA3"><a href="#4-RSA3" class="headerlink" title="4.RSA3"></a>4.RSA3</h1><p>类型：共模n攻击<br><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190704392.png" alt="image-20220401190704392"></p><p>明显的共模攻击,</p><p>共模攻击的特点是多组RSA加密,e和c都不同,但是却使用了相同的n</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn <span class="token operator">=</span> <span class="token number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>c1 <span class="token operator">=</span> <span class="token number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>c2 <span class="token operator">=</span> <span class="token number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>e1 <span class="token operator">=</span> <span class="token number">11187289</span>e2 <span class="token operator">=</span> <span class="token number">9647291</span>_<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> r<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-RSAroll"><a href="#5-RSAroll" class="headerlink" title="5.RSAroll"></a>5.RSAroll</h1><p>类型：n+e+c+p+q= m + n分解</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190746525.png" alt="image-20220401190746525">[在线分解质因数]分解920139713<br><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401185602775.png" alt="image-20220401185602775"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2N<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">920139713</span><span class="token punctuation">,</span><span class="token number">18443</span><span class="token punctuation">,</span><span class="token number">49891</span><span class="token punctuation">,</span><span class="token number">19</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"D:\\pycharm\\venv\\mima\\RSAroll.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#去掉列表中每一个元素的换行符</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-Dangerous-RSA"><a href="#6-Dangerous-RSA" class="headerlink" title="6.Dangerous RSA"></a>6.Dangerous RSA</h1><p>类型：低加密指数攻击 e很小 n很大又不好分解<br>脚本：RSA各题型脚本\e=2-低加密指数攻击\低加密指数攻击.py</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401185859340.png" alt="image-20220401185859340"></p><p>低加密指数攻击：<br>所谓低加密指数指的就是e非常小的情况下，通常为3。<br>这种题目通常有两种类型，一种直接爆破，另外一种是低指数广播攻击。</p><p>先介绍比较简单的情况。假设e=3, e很小，但是n很大。<br>回顾RSA加密公式： C=M^e % n (C密文，M明文)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> iroot<span class="token keyword">import</span> libnumn <span class="token operator">=</span> <span class="token number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span>c <span class="token operator">=</span> <span class="token number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    res<span class="token operator">=</span>iroot<span class="token punctuation">(</span>c<span class="token operator">+</span>k<span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-GUET-CTF2019-BabyRSA"><a href="#7-GUET-CTF2019-BabyRSA" class="headerlink" title="7.[GUET-CTF2019]BabyRSA"></a>7.[GUET-CTF2019]BabyRSA</h1><p>观察题目给的条件，给了p+q，（p+1)(q+1)，e，d,以及密文C.<br>RSA的解密公式：M=C^d mod n<br>所以我们只要求出n即可。(n = p<em>q)<br>n = (p+1)</em>(q+1) - (p+q) - 1<br>求M的值，已知C，d，n后 用函数pow(),即可求出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnuma <span class="token operator">=</span> <span class="token number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span>b <span class="token operator">=</span> <span class="token number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span>e <span class="token operator">=</span> <span class="token number">0xe6b1bee47bd63f615c7d0a43c529d219</span>d <span class="token operator">=</span> <span class="token number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span>c<span class="token operator">=</span> <span class="token number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span>n <span class="token operator">=</span> b<span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">1</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#（n2s将数值转化为字符串）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-WUSTCTF2020-babyrsa"><a href="#8-WUSTCTF2020-babyrsa" class="headerlink" title="8.[WUSTCTF2020]babyrsa"></a>8.[WUSTCTF2020]babyrsa</h1><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190253036.png" alt="image-20220401190253036"></p><p>看能不能<a href="http://factordb.com/index.php?id=1100000000949744285">分解N</a></p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220401190324897.png" alt="image-20220401190324897"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span>  gmpy2p<span class="token operator">=</span><span class="token number">386123125371923651191219869811293586459</span>q<span class="token operator">=</span><span class="token number">189239861511125143212536989589123569301</span>c<span class="token operator">=</span><span class="token number">28767758880940662779934612526152562406674613203406706867456395986985664083182</span>n<span class="token operator">=</span> <span class="token number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>e<span class="token operator">=</span><span class="token number">65537</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-BJDCTF2020-easyrsa"><a href="#9-BJDCTF2020-easyrsa" class="headerlink" title="9.[BJDCTF2020]easyrsa"></a>9.[BJDCTF2020]easyrsa</h2><p>题目给出py文件</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220402163423395.png" alt="image-20220402163423395"></p><p>通过一系列算法给出了已知条件c，z，n</p><p>通过第10行z算法我们可以知道p，q与z之间的关系(p+q)2=z+2n ，(p-q)2=z-2n</p><p>直接上脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gpe <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>n <span class="token operator">=</span> <span class="token number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>z <span class="token operator">=</span> <span class="token number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><span class="token comment">#p = z//2</span>p<span class="token operator">=</span><span class="token punctuation">(</span>gp<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>z<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>gp<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>z<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>q <span class="token operator">=</span> n<span class="token operator">//</span>pd <span class="token operator">=</span> gp<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> gp<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">import</span> binascii<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token punctuation">,</span>long_to_bytes<span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag：BJD{Advanced_mathematics_is_too_hard!!!}</p><h2 id="10-ACTF新生赛2020-crypto-rsa3"><a href="#10-ACTF新生赛2020-crypto-rsa3" class="headerlink" title="10.[ACTF新生赛2020]crypto-rsa3"></a>10.[ACTF新生赛2020]crypto-rsa3</h2><p>给出py文件</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220402170020586.png" alt="image-20220402170020586"></p><p>文本给出明显就是n与c</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220402170048133.png" alt="image-20220402170048133"></p><p>由题目可知p，q是随机生成的大素数，且q是紧邻p的下一个素数。可知p，q大小差不多，所以我们只需要将n除以2，再将得到的素数用gmpy2.next_prime就能得到p，问题也就迎刃而解了，直接上脚本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> sympy<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn<span class="token operator">=</span><span class="token number">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683</span>e <span class="token operator">=</span> <span class="token number">65537</span>c<span class="token operator">=</span><span class="token number">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span>n2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>p<span class="token operator">=</span>sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>n2<span class="token punctuation">)</span>q<span class="token operator">=</span>n<span class="token operator">//</span>pphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到flag：actf{p_and_q_should_not_be_so_close_in_value}</p><h1 id="11-BJDCTF2020-RSA"><a href="#11-BJDCTF2020-RSA" class="headerlink" title="11.[BJDCTF2020]RSA"></a>11.[BJDCTF2020]RSA</h1><p>题目</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220402182437325.png" alt="image-20220402182437325"></p><h1 id="12-NCTF2019-babyRSA"><a href="#12-NCTF2019-babyRSA" class="headerlink" title="12.[NCTF2019]babyRSA"></a>12.[NCTF2019]babyRSA</h1><p>题目</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">+=</span> <span class="token number">2</span>    <span class="token keyword">return</span> np <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q <span class="token operator">=</span> nextPrime<span class="token punctuation">(</span>p<span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe <span class="token operator">=</span> <span class="token number">0x10001</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span><span class="token comment"># c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破，需要熟练掌握估算比特位来提高爆破效率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number<span class="token keyword">import</span> sympyd <span class="token operator">=</span> <span class="token number">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>c <span class="token operator">=</span> <span class="token number">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>e <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token comment"># 有 c d e 我们知道e*d %([p-1)*(q-1)]= 1 则e*d-1 = k* （p-1)*(q-1）</span><span class="token comment"># 可以爆破k要得到(p-1)(q-1)</span><span class="token comment">#取k的范围 ed - 1是2063到2064位 、 （p-1）（q-1）是1024+1024位 则k取2**15~2**16 </span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span>i <span class="token keyword">and</span> e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span>        <span class="token comment">#2063</span><span class="token comment"># (e*d-1)对k的模为0</span><span class="token comment"># 我们还知道q是p的下一个素数 俩者大小相差不大  </span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>prevprime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>k<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">#通过sympy.prevprime(n)得到小于n的最大素数 </span>        <span class="token comment">#gmpy2.iroot开方函数输出的是一个元组</span>        q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token comment"># print(q)</span>        <span class="token comment"># print(p)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>k <span class="token operator">==</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#验证pq是否正确</span>            <span class="token keyword">break</span>n <span class="token operator">=</span> q <span class="token operator">*</span> pm <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>n <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'NCTF&#123;70u2_nn47h_14_v3ry_gOO0000000d&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-AFCTF2018-可怜的RSA"><a href="#13-AFCTF2018-可怜的RSA" class="headerlink" title="13.[AFCTF2018]可怜的RSA"></a>13.[AFCTF2018]可怜的RSA</h2><p>题目，如题给出了两个文件</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220403153336479.png" alt="image-20220403153336479"></p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220403153411830.png" alt="image-20220403153411830"></p><p>去公钥签名网站 可以直接得出n和e</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220403153525188.png" alt="image-20220403153525188"></p><p>而flag这个文件夹则是私钥经过base64加密过后的，但是直接去base64解密是不行的，而从给出公钥签名我们可以知道这个题目考察的是数字签名。</p><p>上脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">import</span> base64<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span>N <span class="token operator">=</span> <span class="token number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">3133337</span>q <span class="token operator">=</span> <span class="token number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># print(type(d))</span>key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\阳\\Desktop\\sb\\flag.enc"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 读取密文</span>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    flag <span class="token operator">=</span> cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分解n得到p，q，需要注意的是此处d是mpz大整数类型，我们可以用tpye命令查看，但是mpz不适用后面解密，会报错，所以我们强制将他转化成int类型就不会报错了。</p><p>还有open那一行中的r需要注意 看下图</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220403154028054.png" alt="image-20220403154028054"></p><p>有时候碰到乱码时我们需要用到”rb”以二进制形式去读取数据</p><p>最后得到flag:afctf{R54_|5_$0_B0rin9}</p><h2 id="14-RoarCTF2019-RSA"><a href="#14-RoarCTF2019-RSA" class="headerlink" title="14.[RoarCTF2019]RSA"></a>14.[RoarCTF2019]RSA</h2><p>题目</p><p><img src="C:\Users\阳\AppData\Roaming\Typora\typora-user-images\image-20220404191623111.png" alt="image-20220404191623111"></p><p>A的得来看起来很复杂，，p，q都是与z有关的大素数，乍一看貌似不用A也做这道题，但是e又是未知，可以尝试爆破一下e，猜一下e的取值范围。p，q可以通过ya-fu在线分解得到，这样子我们就可以做了，上脚本</p><h4 id="脚本可以简化，在素数中找e可以大大提高效率"><a href="#脚本可以简化，在素数中找e可以大大提高效率" class="headerlink" title="脚本可以简化，在素数中找e可以大大提高效率"></a>脚本可以简化，在素数中找e可以大大提高效率</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span>p <span class="token operator">=</span> <span class="token number">842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569</span>q <span class="token operator">=</span> <span class="token number">139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183</span>c <span class="token operator">=</span> <span class="token number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>        m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'CTF'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            e <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本中使用了嵌套语法，让计算机直接在素数中找，省了很多时间</p><p>最后flag:RoarCTF{wm-l1l1ll1l1l1l111ll}</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
